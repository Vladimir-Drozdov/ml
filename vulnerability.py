import requests
from bs4 import BeautifulSoup as bs
from urllib.parse import urljoin
csp_presence = False
def forms_on_page(url):
    #По url я получаю все формы на стнанице
    response = requests.get(url)
    content = response.content
    #headers=response.headers#не та страница для проверки csp нужна target_url
    #print("headers", headers)
    soup = bs(content, "html.parser")
    all_forms = soup.find_all("form")
    return all_forms
def scrf_token(url):#ищет csrf-токен на странице
    csrfToken_in_input = False
    csrfToken_in_meta = False
    response = requests.get(url)
    content = response.content
    soup = bs(content, "html.parser")
    all_inputs = soup.find_all('input')
    for input in all_inputs:
        if(input.has_attr('name')):
            value = input['name']
            if 'csrf' in value:
                if input['value']:
                    csrfToken_in_input = True
                    csrf_token = input['value']
                    print(f'CSRF-токен найден: {csrf_token}')
                else:
                    print('CSRF-токен не найден')
    all_meta = soup.find_all('meta')
    for meta in all_meta:
        if(meta.has_attr('name')):
            value = meta['name']
            if 'csrf' in value:
                csrfToken_in_meta = True
    if csrfToken_in_input or csrfToken_in_input:
        return 1#есть csrf-токен
    return 0#нет csrf-токена
    #csrf_token_in_meta = soup.select_one('meta[name="csrf-token"]') #['content']
def inputs_in_form(form):
    details = {}
    # получаю action у формы
    action_of_form = form.attrs.get("action").lower()
    # получаю метод формы
    method_of_form = form.attrs.get("method", "get").lower()
    # get all the input details such as type and name
    inputs = []
    list_of_inputs_in_form=form.find_all("input")
    for input in list_of_inputs_in_form:
        input_type = input.attrs.get("type", "text")
        input_name = input.attrs.get("name")
        inputs.append({"type": input_type, "name": input_name})
    details["action"] = action_of_form
    details["method"] = method_of_form
    details["inputs"] = inputs
    return details #словарь содержит информацию о input-ах формы
def submitting_of_form(form_details, url, value):#отправляем форму
    # составляем полный url
    target_url = urljoin(url, form_details["action"])
    print(target_url)

    inputs = form_details["inputs"]
    data = {}
    csp_presence = False
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search":
            #print(value, type(value))
            input["value"] = value
        input_name = input.get("name")
        input_value = input.get("value")
        if input_name and input_value:
            if input_value != None:
                data[input_name] = input_value
    if form_details["method"] == "post":
        response = requests.post(target_url, data=data)

        return response
    else:
        return requests.get(target_url, params=data)

def check_csp(csp):
    unsafe_inline = "unsafe" in csp or "inline" in csp
    unsafe_eval = "unsafe" in csp or "eval" in csp
    http = "http" in csp
    if unsafe_inline or unsafe_eval or http:
        return 0
    return 1

def scan_xss(url):
    """
    Given a `url`, it prints all XSS vulnerable forms and
    returns True if any is vulnerable, False otherwise
    """
    # get all the forms from the URL
    forms = forms_on_page(url)
    print(f"[+] Detected {len(forms)} forms on {url}.")
    #js_script = "<Script>alert('hi')</scripT>"
    js_script = "<script>alert('hi')</script>"
    # returning value
    is_vulnerable = False
    # iterate over all forms
    for form in forms:
        form_details = inputs_in_form(form)
        response = submitting_of_form(form_details, url, js_script)
        content = response.content.decode()
        headers = response.headers
        check=1
        if 'Content-Security-Policy' in headers:
            csp = headers['Content-Security-Policy']
            check = check_csp(csp)
            csp_presence = True
        else:
            csp_presence = False
        if js_script in content and check == 0:
            print("content:", content)
            print(f"XSS Detected on {url}")
            print(f"Form details:")
            print(form_details)
            is_vulnerable = True
            # won't break because we want to print available vulnerable forms
        if js_script in content and csp_presence == False:
            print("Установите Content-Security-Policy")
    #print(csp_presence)
    if csp_presence and check:
        is_vulnerable = False
    print(is_vulnerable)

#scan_xss("https://xss-game.appspot.com/level1/frame")
scan_xss("http://localhost:3000/")#False, если есть санитайзинг, True-если есть CSP, экранирование(на клиентской стороне, т.е. нужна защита на двух уровнях чтобы все было впорядке), проверяет только ту страницу, на которыую ведет action у form
scrf_token("http://localhost:3000/")